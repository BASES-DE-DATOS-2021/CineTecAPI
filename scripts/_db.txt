DROP SCHEMA public CASCADE;
CREATE SCHEMA public;


CREATE TABLE "Employees"
(
	branch_id 			VARCHAR(30) NOT NULL,
    cedula 				INT NOT NULL,
	first_name	 		VARCHAR(30) NOT NULL,
	middle_name	 		VARCHAR(30),
	first_surname	 	VARCHAR(30) NOT NULL,
	second_surname	 	VARCHAR(30) NOT NULL,
	birth_date		 	DATE NOT NULL,
    phone_number 		VARCHAR(30) NOT NULL,
	username			VARCHAR(30) NOT NULL,
	password			VARCHAR(30) NOT NULL,
	PRIMARY KEY(cedula)
);


CREATE TABLE "Clients"
(
	cedula 				INT NOT NULL,
	first_name 			VARCHAR(30) NOT NULL,
	middle_name 		VARCHAR(30),
	first_surname 		VARCHAR(30) NOT NULL,
	second_surname 		VARCHAR(30) NOT NULL,
	birth_date 			DATE NOT NULL,
	phone_number 		VARCHAR(30),
	username 			VARCHAR(30) NOT NULL,
	password 			VARCHAR(30) NOT NULL,
	PRIMARY KEY (cedula)
);


CREATE TABLE "Branches"
(
    cinema_name VARCHAR(30) NOT NULL,
    province VARCHAR(30) NOT NULL,
    district VARCHAR(30) NOT NULL,
    PRIMARY KEY(cinema_name)
);


CREATE TABLE "Rooms"
(
	branch_name 		VARCHAR(30) NOT NULL,
    id 					INT NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 999 CACHE 1 ),
	row_quantity 		INT NOT NULL,
	column_quantity 	INT NOT NULL,
	rooms_quantity INT NOT NULL,	
	PRIMARY KEY(id)
);


CREATE TABLE "Seats"
(
	room_id 			INT NOT NULL,
    number 				INT NOT NULL,
	status		 		VARCHAR(30) NOT NULL,
	PRIMARY KEY(room_id, number)
);

CREATE TABLE "Bills"
(
	client_id 			INT NOT NULL,
    projection_id 		INT NOT NULL,
	id					INT NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 999 CACHE 1 ),
	detail				VARCHAR(255),
	PRIMARY KEY(id)
);

CREATE TABLE "Projections"
(
	room_id 			INT NOT NULL,
    movie_id	 		INT NOT NULL,
	id					INT NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 999 CACHE 1 ),
	date				DATE NOT NULL,
	time				TIME NOT NULL,
	PRIMARY KEY(id)
);


CREATE TABLE "Movies"
(
	id 						INT NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 999 CACHE 1 ),
	classification_id 		VARCHAR(30),
	director_id 			INT NOT NULL,
    image 					VARCHAR(30) NOT NULL,
    original_name 			VARCHAR(30) NOT NULL,
    name 					VARCHAR(30) NOT NULL,
	length 					VARCHAR(30) NOT NULL,
    PRIMARY KEY(id)
);	


CREATE TABLE "Directors"
(
	id				INT NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 999 CACHE 1 ),
	name 			VARCHAR(30) NOT NULL,
    PRIMARY KEY(id)
);


CREATE TABLE "Classifications"
(
	code 			VARCHAR(30) NOT NULL,
	details 		VARCHAR(30) NOT NULL,
	age_rating		INT NOT NULL,
    PRIMARY KEY(code)
);


CREATE TABLE "Acts"
(
	movie_id		INT NOT NULL,
	actor_id		INT NOT NULL,
	PRIMARY KEY(movie_id, actor_id)
);


CREATE TABLE "Actors"
(
	id				INT NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 999 CACHE 1 ),
	name 			VARCHAR(30) NOT NULL,
    PRIMARY KEY(id)
);



-- Foreign Keys

ALTER TABLE "Employees"
ADD CONSTRAINT EMPLOYEE_BRANCH_FK FOREIGN KEY(branch_id)
REFERENCES "Branches"(cinema_name);


ALTER TABLE "Rooms"
ADD CONSTRAINT ROOM_BRANCH_FK FOREIGN KEY(branch_name)
REFERENCES "Branches"(cinema_name);


ALTER TABLE "Seats"
ADD CONSTRAINT SEAT_ROOM_FK FOREIGN KEY(room_id)
REFERENCES "Rooms"(id);


ALTER TABLE "Bills"
ADD CONSTRAINT BILL_CLIENT_FK FOREIGN KEY(client_id)
REFERENCES "Clients"(cedula);

ALTER TABLE "Bills"
ADD CONSTRAINT BILL_PROJECTION_FK FOREIGN KEY(projection_id)
REFERENCES "Projections"(id);


ALTER TABLE "Projections"
ADD CONSTRAINT PROJECTION_ROOM_FK FOREIGN KEY(room_id)
REFERENCES "Rooms"(id);

ALTER TABLE "Projections"
ADD CONSTRAINT PROJECTION_MOVIE_FK FOREIGN KEY(movie_id)
REFERENCES "Movies"(id);


ALTER TABLE "Movies"
ADD CONSTRAINT MOVIE_CLASSIFICATION_FK FOREIGN KEY(director_id)
REFERENCES "Directors"(id);

ALTER TABLE "Movies"
ADD CONSTRAINT MOVIE_DIRECTOR_FK FOREIGN KEY(classification_id)
REFERENCES "Classifications"(code);


ALTER TABLE "Acts"
ADD CONSTRAINT ACTS_MOVIE_FK FOREIGN KEY(movie_id)
REFERENCES "Movies"(id);

ALTER TABLE "Acts"
ADD CONSTRAINT ACTS_ACTOR_FK FOREIGN KEY(actor_id)
REFERENCES "Actors"(id);


---- FUNCIONES DE LOS ATRIBUTOS DERIVADOS.
-- Funcion para obtener la edad.
CREATE OR REPLACE FUNCTION get_age( birthday DATE )
RETURNS INT
AS $CODE$
BEGIN
	RETURN (CURRENT_DATE - birthday)/365.25;
END
$CODE$
LANGUAGE plpgsql IMMUTABLE;

-- Funcion para obtener la capacidad.
CREATE OR REPLACE FUNCTION get_capacity( rows INT, columns INT )
RETURNS INT
AS $CODE$
BEGIN
    RETURN rows * columns;
END
$CODE$
LANGUAGE plpgsql IMMUTABLE;


-- -- Funcion para obtener la cantidad de salas referentes a una sucursal.
-- CREATE OR REPLACE FUNCTION get_room_quantity( cinema VARCHAR(30) )
-- RETURNS integer
-- LANGUAGE plpgsql immutable
-- AS $$
--   DECLARE quant integer;
-- BEGIN
-- -- 	SELECT (
-- -- 		SELECT COUNT(*)  INTO account_count
-- -- 		FROM "Rooms" as R 
-- -- 		WHERE B.cinema_name = cinema AND R.branch_name = B.cinema_name) 
-- -- 		AS room_quantity FROM "Branches" as B
-- 	SELECT COUNT(*) INTO quant
-- 		FROM "Rooms" as R 
-- 		WHERE branch_name = cinema;
	
-- 	UPDATE "Branches"
--     	SET room_quantity = quant; 
-- 	RETURN quant;
-- END;
-- $$;


---- ATRIBUTOS DERIVADOS
ALTER TABLE "Employees"
ADD COLUMN age INT NOT NULL GENERATED ALWAYS AS (get_age(birth_date)) STORED;

ALTER TABLE "Clients"
ADD COLUMN age INT NOT NULL GENERATED ALWAYS AS (get_age(birth_date)) STORED;

ALTER TABLE "Branches" ALTER COLUMN rooms_quantity SET DEFAULT 0;

ALTER TABLE "Rooms"
ADD COLUMN capacity INT NOT NULL GENERATED ALWAYS AS (get_capacity(row_quantity, column_quantity)) STORED;
